{"version":3,"sources":["components/PiePlot.tsx","components/LinePlot.tsx","components/BarPlot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["data","labels","datasets","backgroundColor","hoverBackgroundColor","borderColor","PiePlot","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","label","pointBorderWidth","LinePlot","classes","Grid","container","spacing","direction","justify","alignItems","Card","className","CardContent","Typography","variant","component","BarPlot","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.436e09f1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nconst data = {\r\n  labels: [\"PC\", \"スマホ\"],\r\n  datasets: [\r\n    {\r\n      data: [53.3, 46.7],\r\n      backgroundColor: [\"#4169e1\", \"#ff1493\"],\r\n      hoverBackgroundColor: [\"#36A2E8\", \"#FF6384\"],\r\n      borderColor: [\"transparent\", \"transparent\"],\r\n    },\r\n  ],\r\n};\r\n\r\nconst PiePlot: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h2>アクセス端末（平均）</h2>\r\n      <Doughnut data={data} />\r\n\r\n      <br />\r\n      <div>\r\n        【説明】PCとスマホの割合は同じであり、双方からのアプローチは有効\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PiePlot;\r\n","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nconst data = {\r\n  labels: [\"9/28\", \"9/29\", \"9/30\", \"10/1\"],\r\n  datasets: [\r\n    {\r\n      label: \"来訪者\",\r\n      backgroundColor: \"#cffff0\", //\"#000000\",\r\n      borderColor: \"#7fffd4\",\r\n      pointBorderWidth: 10,\r\n      data: [360, 0, 0, 0, 0],\r\n    },\r\n    {\r\n      label: \"購入者\",\r\n      backgroundColor: \"#C0C0C0\", //\"#000000\",\r\n      borderColor: \"#000\",\r\n      pointBorderWidth: 10,\r\n      data: [3, 0, 0, 0, 0],\r\n    },\r\n    {\r\n      label: \"サンプル利用者\",\r\n      backgroundColor: \"#FFFFEF\", //\"#000000\",\r\n      borderColor: \"#FFCE56\",\r\n      pointBorderWidth: 10,\r\n      data: [9, 0, 0, 0, 0],\r\n    },\r\n  ],\r\n};\r\n\r\n/*\r\n360\r\n\r\n---------\r\n3\r\n\r\n---------\r\n9\r\n\r\n\r\n---------\r\n32,0009\r\n\r\n*/\r\n\r\nconst LinePlot: React.FC = () => {\r\n  const classes = useStyles();\r\n  const bull = <span className={classes.bullet}>•</span>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>来訪者/購入者 </h2>\r\n      <Line data={data} />\r\n\r\n      <br />\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Card className={classes.root}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              累計訪問者\r\n            </Typography>\r\n            <Typography variant=\"h6\" component=\"p\">\r\n              360顧客\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className={classes.root}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              累計購買者\r\n            </Typography>\r\n            <Typography variant=\"h6\" component=\"p\">\r\n              3顧客\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className={classes.root}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              累計購買率\r\n            </Typography>\r\n            <Typography variant=\"h6\" component=\"p\">\r\n              0.8%\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className={classes.root}>\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              累計受注金額\r\n            </Typography>\r\n            <Typography variant=\"h6\" component=\"p\">\r\n              ￥32,009\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n\r\n      <br />\r\n      <div>\r\n        【説明】対象が1000顧客。360と訪問顧客率は悪くないと考える。\r\n        <br />\r\n        　購買率 = 購買顧客/訪問顧客 *\r\n        １００が１％を下回っているため、１～３％を目標に対策を講じるのが良いかも。\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LinePlot;\r\n","import React from \"react\";\r\nimport { HorizontalBar } from \"react-chartjs-2\";\r\n\r\nconst data = {\r\n  labels: [\r\n    \"【72％OFF】 鉄腕ミートボール 15g\",\r\n    \"【81％OFF】 ラビオリ 1kg\",\r\n    \"【71％OFF】 ベジタリアン向け　焼売 約14g\",\r\n    \"【62％OFF】 尾付開きえび（チリソースキット） 13g\",\r\n    \"【79％OFF】 ベジタリアン向け　餃子（焼調理済） 約17g\",\r\n    \"【22％OFF】 コーンポタージュフライ 30g\",\r\n    \"【40％OFF】 てづくりランチかき揚げ 60g\",\r\n    \"【33％OFF】 若鶏の唐揚げ 1㎏\",\r\n    \"【13％OFF】 北海道産たらこ入りポテトのチーズソース包み揚げ 80g\",\r\n    \"【48％OFF】 お好み揚げ 約77g\",\r\n  ],\r\n  datasets: [\r\n    {\r\n      label: \"商品トレンド（ページビュー）\",\r\n      backgroundColor: \"#20b2aa\",\r\n      borderColor: \"transparent\",\r\n      hoverBackgroundColor: \"#5f9ea0\",\r\n      data: [14, 12, 10, 10, 8, 8, 7, 6, 6, 6],\r\n    },\r\n  ],\r\n};\r\n\r\nconst BarPlot: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h2>商品トレンド</h2>\r\n      <HorizontalBar data={data} />\r\n\r\n      <br />\r\n      <div>【説明】割引率が高い商品は、閲覧数が多い。</div>\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BarPlot;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport PiePlot from \"./components/PiePlot\";\r\nimport LinePlot from \"./components/LinePlot\";\r\nimport BarPlot from \"./components/BarPlot\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>2020秋冬新商品お試しサポート提案会 簡易表</h1>\r\n      <br />\r\n      <PiePlot />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <LinePlot />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <BarPlot />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}